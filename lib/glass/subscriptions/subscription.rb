module Glass
  SUBSCRIPTION="subscription"

  # A subscription to events on a collection.
  #
  class Subscription
    class << self
      # The type of resource. This is always mirror#subscription.
      #
      attr_accessor :kind

      ##
      # Subscribe to notifications for the current user.
      #
      # @param [Google::APIClient] client
      #   Authorized client instance.
      # @param [String] collection
      #   Collection to subscribe to (supported values are "timeline" and "locations").
      # @param [String] user_token
      #   Opaque token used by the Glassware to identify the user the notification
      #   pings are sent for (recommended).
      # @param [String] verify_token
      #   Opaque token used by the Glassware to verify that the notification pings are
      #   sent by the API (optional).
      # @param [String] callback_url
      #   URL receiving notification pings (must be HTTPS).
      # @param [Array] operation
      #   List of operations to subscribe to. Valid values are "UPDATE", "INSERT" and
      #   "DELETE" or nil to subscribe to all.
      # @return nil
      def subscribe_to_notification(mirror, collection, user_token, verify_token, callback_url, operation)
        subscription = mirror.subscriptions.insert.request_schema.new({
                                                                          'collection' => collection,
                                                                          'userToken' => user_token,
                                                                          'verifyToken' => verify_token,
                                                                          'callbackUrl' => callback_url,
                                                                          'operation' => operation})
        result = client.execute(
            :api_method => mirror.subscriptions.insert,
            :body_object => subscription)
        if result.error?
          puts "An error occurred: #{result.data['error']['message']}"
        end
      end

    end

    @@kind = MIRROR+"#"+SUBSCRIPTION

    # The ID of the subscription.
    #
    attr_accessor :id
    @id

    # The time at which this subscription was last modified, formatted according to RFC 3339.
    #
    attr_accessor :updated
    @updated

    # The collection to subscribe to. Allowed values are:
    #   timeline - Changes in the timeline including insertion, deletion, and updates.
    #   locations - Location updates.
    attr_accessor :collection
    @collection
    TIMELINE="timeline"
    LOCATIONS="locations"

    # A list of operations that should be subscribed to.
    # An empty list indicates that all operations on the collection should be subscribed to. Allowed values are:
    #   UPDATE - The item has been updated.
    #   INSERT - A new item has been inserted.
    #   DELETE - The item has been deleted.
    attr_accessor :operation
    @operation= []

    # The URL where notifications should be delivered (must start with https://).
    #
    attr_accessor :callbackUrl
    @callbackUrl

    # A secret token sent to the subscriber in notifications
    # so that it can verify that the notification was generated by Google.
    #
    attr_accessor :verifyToken
    @verifyToken

    # An opaque token sent to the subscriber in notifications so that it can determine the ID of the user.
    #
    attr_accessor :userToken
    @userToken

    # Container object for notifications.
    # This is not populated in the Subscription resource.
    #
    attr_accessor :notification
    @notification

    class Notification
      # The collection that generated the notification.
      #
      attr_accessor :collection
      @collection

      # The ID of the item that generated the notification.
      #
      attr_accessor :itemId
      @itemId

      # The type of operation that generated the notification.
      #
      attr_accessor :operation
      @operation

      # The secret verify token provided by the service when it subscribed for notifications.
      #
      attr_accessor :verifyToken
      @verifyToken

      # The user token provided by the service when it subscribed for notifications.
      #
      attr_accessor :userToken
      @userToken

      # A list of actions taken by the user that triggered the notification.
      #
      attr_accessor :userActions
      @userActions=[]

      class Action
        # The type of action. The value of this can be:
        #   SHARE - the user shared an item.
        #   REPLY - the user replied to an item.
        #   REPLY_ALL - the user replied to all recipients of an item.
        #   CUSTOM - the user selected a custom menu item on the timeline item.
        #   DELETE - the user deleted the item.
        #   PIN - the user pinned the item.
        #   UNPIN - the user unpinned the item.
        # In the future, additional types may be added. UserActions with unrecognized types should be ignored.
        #
        attr_accessor :type
        @type

        SHARE="SHARE"
        REPLY="REPLY"
        REPLY_ALL="REPLY_ALL"
        CUSTOM="CUSTOM"
        DELETE="DELETE"
        PIN="PIN"
        UNPIN="UNPIN"

        # An optional payload for the action.
        #
        # For actions of type CUSTOM, this is the ID of the custom menu item that was selected.
        #
        attr_accessor :payload
        @payload

      end

    end

  end

end